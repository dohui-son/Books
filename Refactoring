# 서문

---

- When 언제
    - 언제 리팩터링을 시장 하는 것이 적절한가
    - 리팩터링이 기준 이상으로 필요한 코드들은 일정 패턴이 존재
    - 리팩터링 종료의 정확한 기준 미정
- How 어떻게
    - 어떤 리팩터링 기법을 적용할 것인가
    - 다음과 같은 코드 악취(리팩터링을 필요로 하는 패턴들) 리스트를 살펴보고 6-12장의 리팩터링 기법을 적용하자
- Conclusion
    - 리팩터링이 필요한 패턴을 분석한 후 리팩터링 필요한 시점을 판단
    - 리팩터링이 필요한 패턴을 통해 코드 악취 원인 진단 가능
    

# 3.1 기이한 이름 Mysterious Name

---

**부적절한 네이밍은 리팩터링의 대상이 된다.**

- 좋은 코드를 위한 조건 “네이밍”
    - 좋은 코드는 명료하고 가독성이 뛰어나야함
    - 네이밍을 통해 가능한 것 (1) 네이밍 == 역할 및 사용법 명시 (e.g. 함수, 모듈, 변수, 클래스)
    - 네이밍을 통해 가능한 것 (2) 네이밍으로 컨텍스트 파악 어려움 해소
- 리팩터링 기법
    - 함수 선언 변경
    - 변수 이름 변경
    - 필드 이름 변경
- 네이밍 VS 아키텍쳐
    - 네이밍이 심각하게 어려운 경우, 설계에 문제가 숨어있을 수 있다.
    - 네이밍을 통해 가능한 것 (1) 근본적인 코드 문제 발견 가능
    - 네이밍을 통해 가능한 것 (2) 로직 개선
    - 네이밍을 통해 가능한 것 (3) 코

# 3.2 중복 코드 Duplicated Code

---

**코드 중복을 통합할 때 차이점 분석이 필요하다.**

- 중복되는 코드를 리팩터링 ⇒ 소프트웨어 개선
- 리팩터링 기법
    - case. 한 클래스에 딸린 두 메서드가 똑같은 표현식 사용
    - 해결 방안 (1) 코드 동일한 경우 - 함수 추출하기 → 양쪽 모두 추출된 메서드 호출 수정
    - 해결 방안 (2) 코드 유사한 경우 - 문장 슬라이드하기 → 유사한 부분 모아 함수 추출 적용 방안 탐구
    - 해결 방안 (3) 동일 부모에서 파생된 서브 클래스 코드 중복 경우 - 메서드 올리기 (부모로 옮기기)

# 3.3 긴 함수 Long Function

---

**짧은 함수는 간접호출(indirection) 효과, 즉 코드 이해/공유/활용의 가능성을 높인다.**

- 짧은 함수
    - 과거와 달리 함수 호출비용 문제 X
    - 가독성 향상 - 네이밍이 적절한 짧은 함수는 내부를 살펴볼 필요가 없고 전체 코드 가독성 증진에 기여
- 함수 작성 Tip
    - 주석으로 남기려던 설명을 코드에 담아 함수를 구성하라!
    - 함수 이름은 동작 방식이 아닌 의도(목적)가 드러나게 지어라!
    - 원래 코드보다 길어지더라도 함수 하라!
    - 코드가 “무엇을 하는지”(목적, 의도) 잘 설명하지 못할수록 함수화 하라!
- 리팩터링 기법
    - 함수 추출하기
    - case. 추출된 함수에서 임시변수 매개변수가 너무 많아서 함수가 난해한 경우
        - 임시 변수를 질의 함수로 바꾸기 기법 - 임시 변수 수 감소
        - 매개변수 객체 만들기 기법 - 매개변수 수 감소
        - 객체 통째로 넘기기 기법 - 매개변수 수 감소
        - 함수를 명령으로 바꾸기 기법 - 임시 변수와 매개변수가 과하게 많은 경우
- 함수화 Tip
    - 주석 참고하기
        - 주석은 코드만으로 이해가 어려운 경우 사용
        - 주석 설명 대상 코드를 함수화, 네이밍에도 주석 참고
    - 조건문 확인하기
        - 조건문 분해하기 기법
        - 거대한 switch문은 case문마다 함수 추출하기 기법 적용 - 각 case문 본문을 함수 호출문 하나로 대체
        - 동일 조건 기준으로 나뉘는 switch문 반복 - 조건부 로직을 다형성으로 바꾸기 기법 적용
    - 반복문 확인하기
        - 반복문 추출해서 함수화
        - 해당 함수 네이밍 어려울시 두가지 이상 역할 공존 확인 → 반복문 쪼개기 기법 적용

# 3.4 긴 매개변수 목록

---

**전역 데이터 감소를 위해 상대적으로 길어진 매개변수들은 이해도를 감소시키는 부작용을 낳는다.**

- 긴 매개변수 해결 방안
    - 매개변수를 질의 함수로 바꾸기 -

# 3.5 전역 데이터

---

# 3.6 가변 데이터

---

# 3.7 뒤엉킨 변경

---

# 3.8 산탄총 수술

---

# 3.9 기능 편애

---

# 3.10 데이터 뭉치

---
